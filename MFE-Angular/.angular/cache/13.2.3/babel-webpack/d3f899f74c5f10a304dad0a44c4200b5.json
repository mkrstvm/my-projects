{"ast":null,"code":"import _asyncToGenerator from \"/Users/_mkrs_/MyWorks/repositories/my-projects/MFE-Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport var FileType = /*#__PURE__*/(() => {\n  (function (FileType) {\n    FileType[\"Component\"] = \"Component\";\n    FileType[\"Module\"] = \"Module\";\n    FileType[\"Css\"] = \"CSS\";\n    FileType[\"Html\"] = \"Html\";\n  })(FileType || (FileType = {}));\n\n  return FileType;\n})();\nexport class MfeUtil {\n  constructor() {\n    // holds list of loaded script\n    this.fileMap = {};\n\n    this.findExposedModule = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (uniqueName, exposedFile) {\n        let Module; // Initializes the shared scope. Fills it with known provided modules from this build and all remotes\n\n        yield __webpack_init_sharing__('default');\n        const container = window[uniqueName]; // or get the container somewhere else\n        // Initialize the container, it may provide shared modules\n\n        yield container.init(__webpack_share_scopes__.default);\n        const factory = yield container.get(exposedFile);\n        Module = factory();\n        return Module;\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  loadRemoteFile(loadRemoteModuleOptions) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.loadRemoteEntry(loadRemoteModuleOptions.remoteEntry);\n      return yield _this.findExposedModule(loadRemoteModuleOptions.remoteName, loadRemoteModuleOptions.exposedFile);\n    })();\n  }\n\n  loadRemoteEntry(remoteEntry) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const scriptId = `${remoteEntry.substring(remoteEntry.lastIndexOf('/') + 1)}`;\n        const getScript = document.getElementById(scriptId);\n\n        if (getScript || _this2.fileMap[remoteEntry]) {\n          resolve();\n          return;\n        }\n\n        const script = document.createElement(\"script\");\n        script.src = remoteEntry;\n        script.id = scriptId;\n\n        script.onerror = error => {\n          console.error(error, 'unable to load remote entry, show error or something');\n          reject();\n        };\n\n        script.onload = () => {\n          _this2.fileMap[remoteEntry] = true;\n          resolve(); // window is the global namespace\n        };\n\n        document.body.append(script);\n      });\n    })();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}