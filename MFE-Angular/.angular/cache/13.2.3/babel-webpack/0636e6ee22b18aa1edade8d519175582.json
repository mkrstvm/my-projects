{"ast":null,"code":"import _asyncToGenerator from \"/Users/_mkrs_/MyWorks/repositories/my-projects/MFE-Angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport var FileType;\n\n(function (FileType) {\n  FileType[\"Component\"] = \"Component\";\n  FileType[\"Module\"] = \"Module\";\n  FileType[\"Css\"] = \"CSS\";\n  FileType[\"Html\"] = \"Html\";\n})(FileType || (FileType = {}));\n\nexport class MfeUtil {\n  constructor() {\n    // holds list of loaded script\n    this.fileMap = {};\n\n    this.findExposedModule = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (uniqueName, exposedFile) {\n        let Module; // Initializes the shared scope. Fills it with known provided modules from this build and all remotes\n\n        yield __webpack_init_sharing__('default');\n        const container = window[uniqueName]; // or get the container somewhere else\n        // Initialize the container, it may provide shared modules\n\n        yield container.init(__webpack_share_scopes__.default);\n        const factory = yield container.get(exposedFile);\n        Module = factory();\n        return Module;\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  loadRemoteFile(loadRemoteModuleOptions) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.loadRemoteEntry(loadRemoteModuleOptions.remoteEntry);\n      return yield _this.findExposedModule(loadRemoteModuleOptions.remoteName, loadRemoteModuleOptions.exposedFile);\n    })();\n  }\n\n  loadRemoteEntry(remoteEntry) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        const scriptId = `${remoteEntry.substring(remoteEntry.lastIndexOf('/') + 1)}`;\n        const getScript = document.getElementById(scriptId);\n\n        if (getScript || _this2.fileMap[remoteEntry]) {\n          resolve();\n          return;\n        }\n\n        const script = document.createElement(\"script\");\n        script.src = remoteEntry;\n        script.id = scriptId;\n\n        script.onerror = error => {\n          console.error(error, 'unable to load remote entry, show error or something');\n          reject();\n        };\n\n        script.onload = () => {\n          _this2.fileMap[remoteEntry] = true;\n          resolve(); // window is the global namespace\n        };\n\n        document.body.append(script);\n      });\n    })();\n  }\n\n}","map":{"version":3,"sources":["/Users/_mkrs_/MyWorks/repositories/my-projects/MFE-Angular/projects/utils/src/lib/mfe.utils.ts"],"names":["FileType","MfeUtil","constructor","fileMap","findExposedModule","uniqueName","exposedFile","Module","__webpack_init_sharing__","container","window","init","__webpack_share_scopes__","default","factory","get","loadRemoteFile","loadRemoteModuleOptions","loadRemoteEntry","remoteEntry","remoteName","Promise","resolve","reject","scriptId","substring","lastIndexOf","getScript","document","getElementById","script","createElement","src","id","onerror","error","console","onload","body","append"],"mappings":";AAAA,OAAO,IAAIA,QAAJ;;AACP,CAAC,UAAUA,QAAV,EAAoB;AACjBA,EAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwB,WAAxB;AACAA,EAAAA,QAAQ,CAAC,QAAD,CAAR,GAAqB,QAArB;AACAA,EAAAA,QAAQ,CAAC,KAAD,CAAR,GAAkB,KAAlB;AACAA,EAAAA,QAAQ,CAAC,MAAD,CAAR,GAAmB,MAAnB;AACH,CALD,EAKGA,QAAQ,KAAKA,QAAQ,GAAG,EAAhB,CALX;;AAMA,OAAO,MAAMC,OAAN,CAAc;AACjBC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,OAAL,GAAe,EAAf;;AACA,SAAKC,iBAAL;AAAA,mCAAyB,WAAOC,UAAP,EAAmBC,WAAnB,EAAmC;AACxD,YAAIC,MAAJ,CADwD,CAExD;;AACA,cAAMC,wBAAwB,CAAC,SAAD,CAA9B;AACA,cAAMC,SAAS,GAAGC,MAAM,CAACL,UAAD,CAAxB,CAJwD,CAIlB;AACtC;;AACA,cAAMI,SAAS,CAACE,IAAV,CAAeC,wBAAwB,CAACC,OAAxC,CAAN;AACA,cAAMC,OAAO,SAASL,SAAS,CAACM,GAAV,CAAcT,WAAd,CAAtB;AACAC,QAAAA,MAAM,GAAGO,OAAO,EAAhB;AACA,eAAOP,MAAP;AACH,OAVD;;AAAA;AAAA;AAAA;AAAA;AAWH;;AACKS,EAAAA,cAAc,CAACC,uBAAD,EAA0B;AAAA;;AAAA;AAC1C,YAAM,KAAI,CAACC,eAAL,CAAqBD,uBAAuB,CAACE,WAA7C,CAAN;AACA,mBAAa,KAAI,CAACf,iBAAL,CAAuBa,uBAAuB,CAACG,UAA/C,EAA2DH,uBAAuB,CAACX,WAAnF,CAAb;AAF0C;AAG7C;;AACKY,EAAAA,eAAe,CAACC,WAAD,EAAc;AAAA;;AAAA;AAC/B,aAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,cAAMC,QAAQ,GAAI,GAAEL,WAAW,CAACM,SAAZ,CAAsBN,WAAW,CAACO,WAAZ,CAAwB,GAAxB,IAA+B,CAArD,CAAwD,EAA5E;AACA,cAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAT,CAAwBL,QAAxB,CAAlB;;AACA,YAAIG,SAAS,IAAI,MAAI,CAACxB,OAAL,CAAagB,WAAb,CAAjB,EAA4C;AACxCG,UAAAA,OAAO;AACP;AACH;;AACD,cAAMQ,MAAM,GAAGF,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAf;AACAD,QAAAA,MAAM,CAACE,GAAP,GAAab,WAAb;AACAW,QAAAA,MAAM,CAACG,EAAP,GAAYT,QAAZ;;AACAM,QAAAA,MAAM,CAACI,OAAP,GAAkBC,KAAD,IAAW;AACxBC,UAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd,EAAqB,sDAArB;AACAZ,UAAAA,MAAM;AACT,SAHD;;AAIAO,QAAAA,MAAM,CAACO,MAAP,GAAgB,MAAM;AAClB,UAAA,MAAI,CAAClC,OAAL,CAAagB,WAAb,IAA4B,IAA5B;AACAG,UAAAA,OAAO,GAFW,CAEP;AACd,SAHD;;AAIAM,QAAAA,QAAQ,CAACU,IAAT,CAAcC,MAAd,CAAqBT,MAArB;AACH,OAnBM,CAAP;AAD+B;AAqBlC;;AAzCgB","sourcesContent":["export var FileType;\n(function (FileType) {\n    FileType[\"Component\"] = \"Component\";\n    FileType[\"Module\"] = \"Module\";\n    FileType[\"Css\"] = \"CSS\";\n    FileType[\"Html\"] = \"Html\";\n})(FileType || (FileType = {}));\nexport class MfeUtil {\n    constructor() {\n        // holds list of loaded script\n        this.fileMap = {};\n        this.findExposedModule = async (uniqueName, exposedFile) => {\n            let Module;\n            // Initializes the shared scope. Fills it with known provided modules from this build and all remotes\n            await __webpack_init_sharing__('default');\n            const container = window[uniqueName]; // or get the container somewhere else\n            // Initialize the container, it may provide shared modules\n            await container.init(__webpack_share_scopes__.default);\n            const factory = await container.get(exposedFile);\n            Module = factory();\n            return Module;\n        };\n    }\n    async loadRemoteFile(loadRemoteModuleOptions) {\n        await this.loadRemoteEntry(loadRemoteModuleOptions.remoteEntry);\n        return await this.findExposedModule(loadRemoteModuleOptions.remoteName, loadRemoteModuleOptions.exposedFile);\n    }\n    async loadRemoteEntry(remoteEntry) {\n        return new Promise((resolve, reject) => {\n            const scriptId = `${remoteEntry.substring(remoteEntry.lastIndexOf('/') + 1)}`;\n            const getScript = document.getElementById(scriptId);\n            if (getScript || this.fileMap[remoteEntry]) {\n                resolve();\n                return;\n            }\n            const script = document.createElement(\"script\");\n            script.src = remoteEntry;\n            script.id = scriptId;\n            script.onerror = (error) => {\n                console.error(error, 'unable to load remote entry, show error or something');\n                reject();\n            };\n            script.onload = () => {\n                this.fileMap[remoteEntry] = true;\n                resolve(); // window is the global namespace\n            };\n            document.body.append(script);\n        });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}